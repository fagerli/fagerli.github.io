{"version":3,"sources":["PlayerPane.js","Timer.js","Score.js","MatchView.js","SetupView.js","HelpView.js","App.js","serviceWorker.js","index.js"],"names":["PlayerPane","props","handleClick","bind","this","clickCallback","value","no","onClick","name","React","Component","require","Timer","state","time","vibrated","me","intervalID","setInterval","isOn","newTime","Date","now","start","setState","swapTime","window","navigator","vibrate","clearInterval","min","Math","floor","sec","minStr","secStr","decoration","className","Score","score","increment","MatchView","gotoHelp","gotoSetup","setView","passivePlayerItems","passivePlayers","map","player","key","swapInPlayer","activePlayerItems","activePlayers","swapOutPlayer","timerButtonText","timerRunning","timerStart","toggleTimer","SetupView","gotoMatch","setMatchDuration","setSwapTime","e","preventDefault","inputfield","document","getElementById","playerItems","concat","onSubmit","addPlayer","id","type","htmlFor","matchDuration","onChange","HelpView","App","home","away","playerCount","activeView","resetScore","playerName","focus","tmpPassivePlayers","playerNumber","push","substitute","newPassivePlayers","filter","newActivePlayers","nextView","nextMatchDuration","nextSwapTime","view","Boolean","location","hostname","match","ReactDOM","render","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.082c6bf4.chunk.js","sourcesContent":["import React from 'react';\nimport './App.css';\n\nclass PlayerPane extends React.Component {\n  constructor(props){\n    super(props)\n    this.handleClick = this.handleClick.bind(this);\n  }\n\n  handleClick(){\n    this.props.clickCallback(this.props.value.no)\n  }\n  \n  render() {\n    return(\n    <li onClick={this.handleClick}>{this.props.value.name}</li>\n    );\n  }\n}\nexport default PlayerPane","const React = require('react')\nclass Timer extends React.Component {\n  constructor(props){\n    super(props)\n    this.state = {\n      time: 0,\n      vibrated : false\n    }\n    let me = this;\n    this.intervalID = setInterval(\n      function(){\n        if(me.props.isOn){\n          let newTime = Date.now() - me.props.start;\n          me.setState({time: newTime})\n          if(me.state.time > me.props.swapTime){\n            if(!me.state.vibrated){\n              window.navigator.vibrate([200, 100, 200, 100, 200]);\n              me.setState({vibrated:true});\n            }\n           }else{\n             if(me.state.vibrated){\n              me.setState({vibrated:false});\n             }\n           }\n        }\n      }  \n      , 1000);\n  }\n  \n\n  componentWillUnmount(){\n    clearInterval(this.intervalID);\n  }\n\n  render() {  \n     let min = Math.floor((this.state.time/1000/60) << 0);\n     let sec = Math.floor((this.state.time/1000) % 60);\n     let minStr = min < 10 ? \"0\"+min : \"\"+min;\n     let secStr = sec < 10 ? \"0\"+sec : \"\"+sec;\n\n     let decoration = \"timer\";\n     if(this.state.time > this.props.swapTime){\n      decoration = \"redTimer\"\n     }\n\n    return(\n      <span className={decoration}>{minStr}:{secStr}</span>\n    )\n  }\n}\nexport default Timer","import React from 'react';\nimport './App.css';\n\nclass Score extends React.Component {\n  constructor(props){\n    super(props)\n    this.state = {\n      score: 0\n    }\n    this.increment = this.increment.bind(this);\n  }\n\n  increment(){\n    this.setState({score : this.state.score+1});\n  }\n  \n  render() {\n    return(\n      <span className=\"score\" onClick={this.increment}>\n      {this.state.score}\n      </span>\n    );\n  }\n}\nexport default Score","import React from 'react';\nimport PlayerPane from './PlayerPane.js';\nimport Timer from './Timer.js';\nimport Score from './Score.js';\nimport './App.css';\n\nclass MatchView extends React.Component {\n  \n  constructor(props){\n       super(props);\n       this.gotoHelp = this.gotoHelp.bind(this);\n       this.gotoSetup = this.gotoSetup.bind(this);\n  }\n\n  gotoHelp(){\n    this.props.setView('HelpView');\n  }\n  \n  gotoSetup(){\n    this.props.setView('SetupView');\n  }\n\n  render(){\n\n    let passivePlayerItems = this.props.passivePlayers.map((player) =>\n    <PlayerPane key={player.no}\n              value={player} clickCallback={this.props.swapInPlayer}  />\n    );\n\n    let activePlayerItems = this.props.activePlayers.map((player) =>\n    <PlayerPane key={player.no}\n              value={player} clickCallback={this.props.swapOutPlayer}  />\n    );\n\n    let timerButtonText = this.props.timerRunning? \"stopp timer\" : \"start timer\";\n\n\n  return (\n    <div className=\"App\">\n      <header className=\"App-header\">\n        <span className=\"center\"><Score/><Timer isOn={this.props.timerRunning} start={this.props.timerStart} swapTime={this.props.swapTime}/><Score/></span>\n      </header>\n      <hr/>\n      <div className=\"activePlayers\">\n        <div>Spillere på banen</div>\n        <ul>{activePlayerItems}</ul>\n      </div>\n      <hr/>\n      <div className=\"passivePlayers\">\n        <div>Spillere på benken</div>\n        <ul>\n        {passivePlayerItems}\n        </ul>\n      </div>\n      <hr/>\n      <button onClick={this.props.toggleTimer}>{timerButtonText}</button>\n      <button onClick={this.gotoSetup}>Setup view</button>\n      <button onClick={this.gotoHelp}>Hjelp</button>\n    </div>\n  );\n  }\n}\nexport default MatchView;","import React from 'react';\nimport PlayerPane from './PlayerPane.js';\nimport './App.css';\n\nclass SetupView extends React.Component {\n  \n  constructor(props){\n    super(props);\n    this.gotoHelp = this.gotoHelp.bind(this);\n    this.gotoMatch = this.gotoMatch.bind(this);\n    this.setMatchDuration = this.setMatchDuration.bind(this);\n    this.setSwapTime = this.setSwapTime.bind(this);\n  }\n\n  gotoHelp(){\n    this.props.setView('HelpView');\n  }\n  \n  gotoMatch(){\n    this.props.setView('MatchView');\n  }\n\n  setMatchDuration(e){\n    e.preventDefault();\n    let inputfield = document.getElementById(\"matchDuration\");\n    this.props.setMatchDuration(inputfield.value*60*1000);\n  }\n\n  setSwapTime(e){\n    e.preventDefault();\n    let inputfield = document.getElementById(\"swapTime\");\n    this.props.setSwapTime(inputfield.value*60*1000);\n  }\n\n  render(){\n\n    let completeList = this.props.activePlayers.concat(this.props.passivePlayers);  \n    let playerItems = completeList.map((player) =>\n    <PlayerPane key={player.no}\n              value={player} clickCallback={this.props.swapOutPlayer}  />\n    );  \n\n  return (\n    <div className=\"App\">\n      <div className=\"activePlayers\">\n        <div>Spillere</div>\n        <ul>{playerItems}</ul>\n      </div>\n      <form onSubmit={this.addPlayer}>\n      <input id=\"nameInput\" type=\"text\"></input>\n      <button onClick={this.props.addPlayer}>legg til spiller</button>\n      </form>\n      <br/>\n      <label htmlFor=\"matchDuration\">Kampvarighet</label>\n      <input id=\"matchDuration\" type=\"number\" value={this.props.matchDuration/60/1000} onChange={this.setMatchDuration}></input>\n      <br/>\n      <label htmlFor=\"swapTime\">Tid mellom bytter</label>\n      <input id=\"swapTime\" type=\"number\" value={this.props.swapTime/60/1000} onChange={this.setSwapTime}></input>\n      <button onClick={this.gotoMatch}>Match view</button>\n      <button onClick={this.gotoHelp}>Hjelp</button>\n    </div>\n  );\n  }\n}\nexport default SetupView;","import React from 'react';\nimport './App.css';\n\nclass HelpView extends React.Component {\n  \n  constructor(props){\n    super(props); \n    this.gotoSetup = this.gotoSetup.bind(this);\n    this.gotoMatch = this.gotoMatch.bind(this);\n  }\n\n  gotoSetup(){\n    this.props.setView('SetupView');\n  }\n  \n  gotoMatch(){\n    this.props.setView('MatchView');\n  }\n\n  render(){\n\n    \n  return (\n    <div className=\"App\">\n      Dette er en veldig enkel app for å holde orden på stillingen, hvilke spillere som skal bytte\n        og hvor lenge det er siden forrige bytte.<br/>\n        <ol>\n        <li>Skriv inn spillernavn og legg til alle spillerne som skal delta</li>\n        <li>Alle spillere havner i utgangspunktet på benken</li>\n        <li>Klikk på spillerene som skal starte, disse hopper da opp i listen over spillere på banen</li>\n        <li>Når kampen starter klikker du på \"start timer\" knappen</li>\n        <li>Øverste navn på listene er de som har vært lengst på banen eller på benken. De er neste som skal byttes</li>\n        <li>Hver gang du gjør et bytte så resettes timer for å vise hvor lang tid det er siden forrige bytte</li>\n        <li>Trykk på pause timer når omgangen er over</li>\n        </ol>\n        <button onClick={this.gotoMatch}>Match view</button>\n        <button onClick={this.gotoSetup}>Setup view</button>\n    </div>\n  );\n  }\n}\nexport default HelpView;","import React from 'react';\nimport MatchView from './MatchView.js';\nimport SetupView from './SetupView.js';\nimport HelpView from './HelpView.js';\nimport './App.css';\n\nclass App extends React.Component {\n  \n  constructor(props){\n    super(props)\n    this.state = {\n      home: 0,\n      away: 0,\n      timerStart: new Date(),\n      timerRunning: false,\n      activePlayers: [],\n      passivePlayers: [],\n      playerCount:0,\n      activeView: 'SetupView',\n      swapTime: 3*60*1000,\n      matchDuration : 13*60*1000\n    }\n\n    this.toggleTimer = this.toggleTimer.bind(this);\n    this.addPlayer = this.addPlayer.bind(this);\n    this.swapInPlayer = this.swapInPlayer.bind(this);\n    this.swapOutPlayer = this.swapOutPlayer.bind(this);\n    this.resetScore = this.resetScore.bind(this);\n    this.setView = this.setView.bind(this);\n    this.setMatchDuration = this.setMatchDuration.bind(this);\n    this.setSwapTime = this.setSwapTime.bind(this);\n\n  }\n\n  toggleTimer(){\n    if(this.state.timerRunning){\n      this.setState({timerRunning: false});\n    }else{\n      this.setState({timerStart: new Date(), timerRunning: true});\n      window.navigator.vibrate([100,30,100,30,100]);\n    }\n  }\n\n  resetScore(){\n    this.setState({home:0,away:0});\n  }\n\n  addPlayer(e){\n    e.preventDefault();\n    let inputfield = document.getElementById(\"nameInput\");\n    let playerName = inputfield.value;\n    inputfield.value = \"\";\n    inputfield.focus();\n    let tmpPassivePlayers = this.state.passivePlayers;\n    let playerNumber = this.state.playerCount+1;\n    tmpPassivePlayers.push({no:playerNumber, name:playerName});\n    this.setState({\n      passivePlayers: tmpPassivePlayers, \n      playerCount: playerNumber });\n  }\n\n  swapInPlayer(key){\n    let substitute;\n    const newPassivePlayers = this.state.passivePlayers.filter(\n        function(player){\n          if(player.no === key){\n            substitute = player;\n            return false\n          }\n          return true;    \n        }\n        );\n    const newActivePlayers = this.state.activePlayers.concat(substitute);    \n    this.setState({passivePlayers: newPassivePlayers, activePlayers: newActivePlayers, timerStart: new Date() });    \n  }\n\n  swapOutPlayer(key){\n    let substitute;\n    const newActivePlayers = this.state.activePlayers.filter(\n        function(player){\n          if(player.no === key){\n            substitute = player;\n            return false\n          }\n          return true;    \n        }\n        );\n    const newPassivePlayers = this.state.passivePlayers.concat(substitute);    \n    this.setState({passivePlayers: newPassivePlayers, activePlayers: newActivePlayers, timerStart: new Date() });    \n  }\n\n  setView(nextView){\n    this.setState({activeView: nextView});\n  }\n\n  setMatchDuration(nextMatchDuration){\n    this.setState({matchDuration: nextMatchDuration});\n  }\n\n  setSwapTime(nextSwapTime){\n    this.setState({swapTime: nextSwapTime});\n  }\n\n  render(){\n\n    let view;\n    if(this.state.activeView==='MatchView'){\n      view = <MatchView \n        passivePlayers={this.state.passivePlayers}\n        activePlayers={this.state.activePlayers}\n        swapTime={this.state.swapTime}\n        swapInPlayer={this.swapInPlayer}\n        swapOutPlayer={this.swapOutPlayer}\n        timerRunning={this.state.timerRunning} \n        timerStart={this.state.timerStart}\n        toggleTimer={this.toggleTimer}\n        setView={this.setView}\n      />\n    }else if(this.state.activeView==='SetupView'){\n      view = <SetupView \n        passivePlayers={this.state.passivePlayers}\n        activePlayers={this.state.activePlayers}\n        swapTime={this.state.swapTime}\n        matchDuration={this.state.matchDuration}\n        addPlayer={this.addPlayer}\n        setSwapTime={this.setSwapTime}\n        setMatchDuration={this.setMatchDuration} \n        setView={this.setView}/>     \n    }else{\n      view = <HelpView setView={this.setView}/>\n    }\n\n  return (\n    <div>{view}</div>\n  );\n  }\n}\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App.js';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}