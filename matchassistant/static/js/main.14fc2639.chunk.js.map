{"version":3,"sources":["PlayerPane.js","Timer.js","Score.js","MatchView.js","SetupView.js","HelpView.js","App.js","serviceWorker.js","index.js"],"names":["PlayerPane","props","handleClick","bind","this","clickCallback","value","no","onClick","name","React","Component","require","Timer","state","time","vibrated","me","intervalID","setInterval","isOn","newTime","Date","now","start","setState","interval","window","navigator","vibrate","clearInterval","min","Math","floor","sec","minStr","secStr","decoration","title","className","style","display","Score","score","increment","decrement","MatchView","gotoHelp","gotoSetup","setView","passivePlayerItems","passivePlayers","map","player","key","swapInPlayer","activePlayerItems","activePlayers","swapOutPlayer","timerButtonText","timerRunning","timerStart","matchDuration","swapTime","swapInterval","toggleTimer","SetupView","gotoMatch","setMatchDuration","setSwapInterval","e","preventDefault","inputfield","document","getElementById","playerItems","concat","deletePlayer","onSubmit","addPlayer","id","type","htmlFor","onChange","clearAppState","HelpView","App","getInitStateObject","resetScore","players","localStorage","getItem","playerArray","JSON","parse","playerCount","length","home","away","playerName","focus","tmpPassivePlayers","playerNumber","push","playerList","setItem","stringify","playerNo","console","log","activeView","substitute","newPassivePlayers","filter","newActivePlayers","nextView","nextMatchDuration","nextSwapInterval","view","Boolean","location","hostname","match","ReactDOM","render","serviceWorker","ready","then","registration","unregister"],"mappings":"2QAmBeA,G,iBAfb,WAAYC,GAAO,IAAD,8BAChB,4CAAMA,KACDC,YAAc,EAAKA,YAAYC,KAAjB,gBAFH,E,2EAMhBC,KAAKH,MAAMI,cAAcD,KAAKH,MAAMK,MAAMC,M,+BAI1C,OACA,wBAAIC,QAASJ,KAAKF,aAAcE,KAAKH,MAAMK,MAAMG,U,GAZ5BC,IAAMC,YCHzBD,EAAQE,EAAQ,GAuDPC,E,YArDb,WAAYZ,GAAO,IAAD,uBAChB,4CAAMA,KACDa,MAAQ,CACXC,KAAM,EACNC,UAAW,GAEb,IAAIC,EAAE,eANU,OAOhB,EAAKC,WAAaC,YAChB,WACE,GAAGF,EAAGhB,MAAMmB,KAAK,CACf,IAAIC,EAAUC,KAAKC,MAAQN,EAAGhB,MAAMuB,MACpCP,EAAGQ,SAAS,CAACV,KAAMM,IAChBJ,EAAGH,MAAMC,KAAOE,EAAGhB,MAAMyB,SACtBT,EAAGH,MAAME,WACXW,OAAOC,UAAUC,QAAQ,CAAC,IAAK,IAAK,IAAK,IAAK,MAC9CZ,EAAGQ,SAAS,CAACT,UAAS,KAGpBC,EAAGH,MAAME,UACXC,EAAGQ,SAAS,CAACT,UAAS,MAK5B,KAxBY,E,oFA6BhBc,cAAc1B,KAAKc,c,+BAIlB,IAAIa,EAAMC,KAAKC,MAAO7B,KAAKU,MAAMC,KAAK,IAAK,IAAO,GAC9CmB,EAAMF,KAAKC,MAAO7B,KAAKU,MAAMC,KAAK,IAAQ,IAC1CoB,EAASJ,EAAM,GAAK,IAAIA,EAAM,GAAGA,EACjCK,EAASF,EAAM,GAAK,IAAIA,EAAM,GAAGA,EAEjCG,EAAa,QACdjC,KAAKU,MAAMC,KAAOX,KAAKH,MAAMyB,WAC/BW,EAAa,YAGd,IAAIC,EAAQlC,KAAKH,MAAMqC,MAExB,OACE,2BACE,2BAAMA,GACN,wBAAMC,UAAWF,EAAYG,MAAO,CAACC,QAAQ,UAAWN,EAAxD,IAAiEC,Q,GAjDrD1B,EAAMC,WCiCX+B,E,YA9Bb,WAAYzC,GAAO,IAAD,8BAChB,4CAAMA,KACDa,MAAQ,CACX6B,MAAO,GAET,EAAKC,UAAY,EAAKA,UAAUzC,KAAf,gBACjB,EAAK0C,UAAY,EAAKA,UAAU1C,KAAf,gBAND,E,yEAUhBC,KAAKqB,SAAS,CAACkB,MAAQvC,KAAKU,MAAM6B,MAAM,M,kCAIrCvC,KAAKU,MAAM6B,MAAQ,GACpBvC,KAAKqB,SAAS,CAACkB,MAAQvC,KAAKU,MAAM6B,MAAM,M,+BAK1C,OACE,0BAAMJ,UAAU,kBAChB,yBAAKA,UAAU,QAAQ/B,QAASJ,KAAKwC,WACpCxC,KAAKU,MAAM6B,OAEZ,yBAAKnC,QAASJ,KAAKyC,WAAnB,U,GA1BcnC,IAAMC,WCkEXmC,E,YA7Db,WAAY7C,GAAO,IAAD,8BACb,4CAAMA,KACD8C,SAAW,EAAKA,SAAS5C,KAAd,gBAChB,EAAK6C,UAAY,EAAKA,UAAU7C,KAAf,gBAHJ,E,wEAOhBC,KAAKH,MAAMgD,QAAQ,c,kCAInB7C,KAAKH,MAAMgD,QAAQ,e,+BAGZ,IAAD,OAEFC,EAAqB9C,KAAKH,MAAMkD,eAAeC,IAAI,SAACC,GAAD,OACvD,kBAAC,EAAD,CAAYC,IAAKD,EAAO9C,GACdD,MAAO+C,EAAQhD,cAAe,EAAKJ,MAAMsD,iBAG/CC,EAAoBpD,KAAKH,MAAMwD,cAAcL,IAAI,SAACC,GAAD,OACrD,kBAAC,EAAD,CAAYC,IAAKD,EAAO9C,GACdD,MAAO+C,EAAQhD,cAAe,EAAKJ,MAAMyD,kBAG/CC,EAAkBvD,KAAKH,MAAM2D,aAAc,cAAgB,cAGjE,OACE,yBAAKrB,UAAU,OACb,4BAAQA,UAAU,cAChB,0BAAMA,UAAU,UACd,kBAAC,EAAD,MACA,0BAAMA,UAAU,UACd,kBAAC,EAAD,CAAOnB,KAAMhB,KAAKH,MAAM2D,aAAcpC,MAAOpB,KAAKH,MAAM4D,WAAYnC,SAAUtB,KAAKH,MAAM6D,cAAexB,MAAM,UAC9G,kBAAC,EAAD,CAAOlB,KAAMhB,KAAKH,MAAM2D,aAAcpC,MAAOpB,KAAKH,MAAM8D,SAAUrC,SAAUtB,KAAKH,MAAM+D,aAAc1B,MAAM,WAE7G,kBAAC,EAAD,QAGJ,6BACA,yBAAKC,UAAU,iBACb,qDACA,4BAAKiB,IAEP,6BACA,yBAAKjB,UAAU,kBACb,sDACA,4BACCW,IAGH,6BACA,4BAAQ1C,QAASJ,KAAKH,MAAMgE,aAAcN,GAC1C,4BAAQnD,QAASJ,KAAK4C,WAAtB,cACA,4BAAQxC,QAASJ,KAAK2C,UAAtB,c,GA1DkBrC,IAAMC,WC8DfuD,E,YA9Db,WAAYjE,GAAO,IAAD,8BAChB,4CAAMA,KACD8C,SAAW,EAAKA,SAAS5C,KAAd,gBAChB,EAAKgE,UAAY,EAAKA,UAAUhE,KAAf,gBACjB,EAAKiE,iBAAmB,EAAKA,iBAAiBjE,KAAtB,gBACxB,EAAKkE,gBAAkB,EAAKA,gBAAgBlE,KAArB,gBALP,E,wEAShBC,KAAKH,MAAMgD,QAAQ,c,kCAInB7C,KAAKH,MAAMgD,QAAQ,e,uCAGJqB,GACfA,EAAEC,iBACF,IAAIC,EAAaC,SAASC,eAAe,iBACzCtE,KAAKH,MAAMmE,iBAAkC,GAAjBI,EAAWlE,MAAS,O,sCAGlCgE,GACdA,EAAEC,iBACF,IAAIC,EAAaC,SAASC,eAAe,YACzCtE,KAAKH,MAAMoE,gBAAiC,GAAjBG,EAAWlE,MAAS,O,+BAGxC,IAAD,OAGFqE,EADevE,KAAKH,MAAMwD,cAAcmB,OAAOxE,KAAKH,MAAMkD,gBAC/BC,IAAI,SAACC,GAAD,OACnC,kBAAC,EAAD,CAAYC,IAAKD,EAAO9C,GACdD,MAAO+C,EAAQhD,cAAe,EAAKJ,MAAM4E,iBAGrD,OACE,yBAAKtC,UAAU,OACb,yBAAKA,UAAU,iBACb,6BAAK,wCAAiB,8BACtB,4BAAKoC,IAEP,0BAAMG,SAAU1E,KAAK2E,WACrB,2BAAOC,GAAG,YAAYC,KAAK,SAC3B,6BACA,4BAAQzE,QAASJ,KAAKH,MAAM8E,WAA5B,qBAEA,6BACA,2BAAOG,QAAQ,iBAAf,gBACA,2BAAOF,GAAG,gBAAgBC,KAAK,SAAS3E,MAAOF,KAAKH,MAAM6D,cAAc,GAAG,IAAMqB,SAAU/E,KAAKgE,mBAChG,6BACA,2BAAOc,QAAQ,YAAf,qBACA,2BAAOF,GAAG,WAAWC,KAAK,SAAS3E,MAAOF,KAAKH,MAAM+D,aAAa,GAAG,IAAMmB,SAAU/E,KAAKiE,kBAC1F,6BACA,4BAAQ7D,QAASJ,KAAK+D,WAAtB,cACA,4BAAQ3D,QAASJ,KAAK2C,UAAtB,SACA,6BACA,4BAAQvC,QAASJ,KAAKH,MAAMmF,eAA5B,kB,GA3DkB1E,IAAMC,WCqCf0E,E,YApCb,WAAYpF,GAAO,IAAD,8BAChB,4CAAMA,KACD+C,UAAY,EAAKA,UAAU7C,KAAf,gBACjB,EAAKgE,UAAY,EAAKA,UAAUhE,KAAf,gBAHD,E,yEAOhBC,KAAKH,MAAMgD,QAAQ,e,kCAInB7C,KAAKH,MAAMgD,QAAQ,e,+BAMrB,OACE,yBAAKV,UAAU,OAAf,+IAE6C,6BACzC,4BACA,+FACA,kFACA,8HACA,4FACA,sJACA,yIACA,gFAEA,4BAAQ/B,QAASJ,KAAK+D,WAAtB,cACA,4BAAQ3D,QAASJ,KAAK4C,WAAtB,mB,GAjCetC,IAAMC,WCsKd2E,E,YAjKb,WAAYrF,GAAO,IAAD,8BAChB,4CAAMA,KACDa,MAAQ,EAAKyE,qBAElB,EAAKtB,YAAc,EAAKA,YAAY9D,KAAjB,gBACnB,EAAK4E,UAAY,EAAKA,UAAU5E,KAAf,gBACjB,EAAK0E,aAAe,EAAKA,aAAa1E,KAAlB,gBACpB,EAAKoD,aAAe,EAAKA,aAAapD,KAAlB,gBACpB,EAAKuD,cAAgB,EAAKA,cAAcvD,KAAnB,gBACrB,EAAKqF,WAAa,EAAKA,WAAWrF,KAAhB,gBAClB,EAAK8C,QAAU,EAAKA,QAAQ9C,KAAb,gBACf,EAAKiE,iBAAmB,EAAKA,iBAAiBjE,KAAtB,gBACxB,EAAKkE,gBAAkB,EAAKA,gBAAgBlE,KAArB,gBACvB,EAAKiF,cAAgB,EAAKA,cAAcjF,KAAnB,gBAbL,E,iFAkBhB,IAAIsF,EAAUC,aAAaC,QAAQ,yBACnC,GAAGF,EAAQ,CACT,IAAIG,EAAcC,KAAKC,MAAML,GAC7BrF,KAAKqB,SAAS,CAAC0B,eAAeyC,EAAYG,YAAYH,EAAYI,Y,oCAKjE5F,KAAKU,MAAM8C,aACZxD,KAAKqB,SAAS,CAACmC,cAAc,KAE7BxD,KAAKqB,SAAS,CAACoC,WAAY,IAAIvC,KAAQyC,SAAU,IAAIzC,KAAQsC,cAAc,IAC3EjC,OAAOC,UAAUC,QAAQ,CAAC,IAAI,GAAG,IAAI,GAAG,S,mCAK1CzB,KAAKqB,SAAS,CAACwE,KAAK,EAAEC,KAAK,M,gCAGnB5B,GACRA,EAAEC,iBACF,IAAIC,EAAaC,SAASC,eAAe,aACrCyB,EAAa3B,EAAWlE,MAC5BkE,EAAWlE,MAAQ,GACnBkE,EAAW4B,QACX,IAAIC,EAAoBjG,KAAKU,MAAMqC,eAC/BmD,EAAelG,KAAKU,MAAMiF,YAAY,EAC1CM,EAAkBE,KAAK,CAAChG,GAAG+F,EAAc7F,KAAK0F,IAC9C/F,KAAKqB,SAAS,CACZ0B,eAAgBkD,EAChBN,YAAaO,IAEf,IAAIE,EAAaH,EAAkBzB,OAAOxE,KAAKU,MAAM2C,eACrDiC,aAAae,QAAQ,wBAAyBZ,KAAKa,UAAUF,M,mCAGlDG,GACXC,QAAQC,IAAI,kE,sCAMZzG,KAAKqB,SAASrB,KAAKmF,wB,2CAInB,MAAO,CACLU,KAAM,EACNC,KAAM,EACNrC,WAAY,IAAIvC,KAChByC,SAAU,IAAIzC,KACdsC,cAAc,EACdH,cAAe,GACfN,eAAgB,GAChB4C,YAAY,EACZe,WAAY,YACZ9C,aAAc,KACdF,cAAgB,Q,mCAIPR,GACX,IAAIyD,EACEC,EAAoB5G,KAAKU,MAAMqC,eAAe8D,OAChD,SAAS5D,GACP,OAAGA,EAAO9C,KAAO+C,IACfyD,EAAa1D,GACN,KAKT6D,EAAmB9G,KAAKU,MAAM2C,cAAcmB,OAAOmC,GACzD3G,KAAKqB,SAAS,CAAC0B,eAAgB6D,EAAmBvD,cAAeyD,EAAkBnD,SAAU,IAAIzC,S,oCAGrFgC,GACZ,IAAIyD,EACEG,EAAmB9G,KAAKU,MAAM2C,cAAcwD,OAC9C,SAAS5D,GACP,OAAGA,EAAO9C,KAAO+C,IACfyD,EAAa1D,GACN,KAKT2D,EAAoB5G,KAAKU,MAAMqC,eAAeyB,OAAOmC,GAC3D3G,KAAKqB,SAAS,CAAC0B,eAAgB6D,EAAmBvD,cAAeyD,EAAkBnD,SAAU,IAAIzC,S,8BAG3F6F,GACN/G,KAAKqB,SAAS,CAACqF,WAAYK,M,uCAGZC,GACfhH,KAAKqB,SAAS,CAACqC,cAAesD,M,sCAGhBC,GACdjH,KAAKqB,SAAS,CAACuC,aAAcqD,M,+BAK7B,IAAIC,EA+BN,OA7BIA,EADyB,cAAxBlH,KAAKU,MAAMgG,WACL,kBAAC,EAAD,CACL3D,eAAgB/C,KAAKU,MAAMqC,eAC3BM,cAAerD,KAAKU,MAAM2C,cAC1BO,aAAc5D,KAAKU,MAAMkD,aACzBT,aAAcnD,KAAKmD,aACnBG,cAAetD,KAAKsD,cACpBE,aAAcxD,KAAKU,MAAM8C,aACzBC,WAAYzD,KAAKU,MAAM+C,WACvBC,cAAe1D,KAAKU,MAAMgD,cAC1BC,SAAU3D,KAAKU,MAAMiD,SACrBE,YAAa7D,KAAK6D,YAClBhB,QAAS7C,KAAK6C,UAEe,cAAxB7C,KAAKU,MAAMgG,WACX,kBAAC,EAAD,CACL3D,eAAgB/C,KAAKU,MAAMqC,eAC3BM,cAAerD,KAAKU,MAAM2C,cAC1BO,aAAc5D,KAAKU,MAAMkD,aACzBF,cAAe1D,KAAKU,MAAMgD,cAC1BiB,UAAW3E,KAAK2E,UAChBF,aAAczE,KAAKyE,aACnBR,gBAAiBjE,KAAKiE,gBACtBD,iBAAkBhE,KAAKgE,iBACvBgB,cAAehF,KAAKgF,cACpBnC,QAAS7C,KAAK6C,UAET,kBAAC,EAAD,CAAUA,QAAS7C,KAAK6C,UAIjC,6BAAMqE,O,GA/JQ5G,IAAMC,WCMJ4G,QACW,cAA7B5F,OAAO6F,SAASC,UAEe,UAA7B9F,OAAO6F,SAASC,UAEhB9F,OAAO6F,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASnD,SAASC,eAAe,SD2H3C,kBAAmB9C,WACrBA,UAAUiG,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC,gB","file":"static/js/main.14fc2639.chunk.js","sourcesContent":["import React from 'react';\nimport './App.css';\n\nclass PlayerPane extends React.Component {\n  constructor(props){\n    super(props)\n    this.handleClick = this.handleClick.bind(this);\n  }\n\n  handleClick(){\n    this.props.clickCallback(this.props.value.no)\n  }\n  \n  render() {\n    return(\n    <li onClick={this.handleClick}>{this.props.value.name}</li>\n    );\n  }\n}\nexport default PlayerPane","const React = require('react')\nclass Timer extends React.Component {\n  constructor(props){\n    super(props)\n    this.state = {\n      time: 0,\n      vibrated : false\n    }\n    let me = this;\n    this.intervalID = setInterval(\n      function(){\n        if(me.props.isOn){\n          let newTime = Date.now() - me.props.start;\n          me.setState({time: newTime})\n          if(me.state.time > me.props.interval){\n            if(!me.state.vibrated){\n              window.navigator.vibrate([200, 100, 200, 100, 200]);\n              me.setState({vibrated:true});\n            }\n           }else{\n             if(me.state.vibrated){\n              me.setState({vibrated:false});\n             }\n           }\n        }\n      }  \n      , 1000);\n  }\n  \n\n  componentWillUnmount(){\n    clearInterval(this.intervalID);\n  }\n\n  render() {  \n     let min = Math.floor((this.state.time/1000/60) << 0);\n     let sec = Math.floor((this.state.time/1000) % 60);\n     let minStr = min < 10 ? \"0\"+min : \"\"+min;\n     let secStr = sec < 10 ? \"0\"+sec : \"\"+sec;\n\n     let decoration = \"timer\";\n     if(this.state.time > this.props.interval){\n      decoration = \"redTimer\"\n     }\n\n     let title = this.props.title;\n\n    return(\n      <div>\n        <div>{title}</div>\n        <span className={decoration} style={{display:'block'}}>{minStr}:{secStr}</span>\n      </div>\n    )\n  }\n}\nexport default Timer","import React from 'react';\nimport './App.css';\n\nclass Score extends React.Component {\n  constructor(props){\n    super(props)\n    this.state = {\n      score: 0\n    }\n    this.increment = this.increment.bind(this);\n    this.decrement = this.decrement.bind(this);\n  }\n\n  increment(){\n    this.setState({score : this.state.score+1});\n  }\n\n  decrement(){\n    if(this.state.score > 0){\n      this.setState({score : this.state.score-1});\n    }\n  }\n  \n  render() {\n    return(\n      <span className=\"scoreContainer\">\n      <div className=\"score\" onClick={this.increment}>\n      {this.state.score}\n      </div>\n      <div onClick={this.decrement}>-</div>\n      </span>\n    );\n  }\n}\nexport default Score","import React from 'react';\nimport PlayerPane from './PlayerPane.js';\nimport Timer from './Timer.js';\nimport Score from './Score.js';\nimport './App.css';\n\nclass MatchView extends React.Component {\n  \n  constructor(props){\n       super(props);\n       this.gotoHelp = this.gotoHelp.bind(this);\n       this.gotoSetup = this.gotoSetup.bind(this);\n  }\n\n  gotoHelp(){\n    this.props.setView('HelpView');\n  }\n  \n  gotoSetup(){\n    this.props.setView('SetupView');\n  }\n\n  render(){\n\n    let passivePlayerItems = this.props.passivePlayers.map((player) =>\n    <PlayerPane key={player.no}\n              value={player} clickCallback={this.props.swapInPlayer}  />\n    );\n\n    let activePlayerItems = this.props.activePlayers.map((player) =>\n    <PlayerPane key={player.no}\n              value={player} clickCallback={this.props.swapOutPlayer}  />\n    );\n\n    let timerButtonText = this.props.timerRunning? \"stopp timer\" : \"start timer\";\n\n\n  return (\n    <div className=\"App\">\n      <header className=\"App-header\">\n        <span className=\"center\">\n          <Score/>\n          <span className=\"center\">\n            <Timer isOn={this.props.timerRunning} start={this.props.timerStart} interval={this.props.matchDuration} title=\"Total\"/>\n            <Timer isOn={this.props.timerRunning} start={this.props.swapTime} interval={this.props.swapInterval} title=\"Bytte\"/>\n          </span>\n          <Score/>\n        </span>\n      </header>\n      <hr/>\n      <div className=\"activePlayers\">\n        <div>Spillere på banen</div>\n        <ul>{activePlayerItems}</ul>\n      </div>\n      <hr/>\n      <div className=\"passivePlayers\">\n        <div>Spillere på benken</div>\n        <ul>\n        {passivePlayerItems}\n        </ul>\n      </div>\n      <hr/>\n      <button onClick={this.props.toggleTimer}>{timerButtonText}</button>\n      <button onClick={this.gotoSetup}>Setup view</button>\n      <button onClick={this.gotoHelp}>Hjelp</button>\n    </div>\n  );\n  }\n}\nexport default MatchView;","import React from 'react';\nimport PlayerPane from './PlayerPane.js';\nimport './App.css';\n\nclass SetupView extends React.Component {\n  \n  constructor(props){\n    super(props);\n    this.gotoHelp = this.gotoHelp.bind(this);\n    this.gotoMatch = this.gotoMatch.bind(this);\n    this.setMatchDuration = this.setMatchDuration.bind(this);\n    this.setSwapInterval = this.setSwapInterval.bind(this);\n  }\n\n  gotoHelp(){\n    this.props.setView('HelpView');\n  }\n  \n  gotoMatch(){\n    this.props.setView('MatchView');\n  }\n\n  setMatchDuration(e){\n    e.preventDefault();\n    let inputfield = document.getElementById(\"matchDuration\");\n    this.props.setMatchDuration(inputfield.value*60*1000);\n  }\n\n  setSwapInterval(e){\n    e.preventDefault();\n    let inputfield = document.getElementById(\"swapTime\");\n    this.props.setSwapInterval(inputfield.value*60*1000);\n  }\n\n  render(){\n\n    let completeList = this.props.activePlayers.concat(this.props.passivePlayers);  \n    let playerItems = completeList.map((player) =>\n    <PlayerPane key={player.no}\n              value={player} clickCallback={this.props.deletePlayer}  />\n    );  \n\n  return (\n    <div className=\"App\">\n      <div className=\"activePlayers\">\n        <div><h1>Spillere</h1><br/></div>\n        <ul>{playerItems}</ul>\n      </div>\n      <form onSubmit={this.addPlayer}>\n      <input id=\"nameInput\" type=\"text\"></input>\n      <br/>\n      <button onClick={this.props.addPlayer}>legg til spiller</button>\n      </form>\n      <br/>\n      <label htmlFor=\"matchDuration\">Kampvarighet</label>\n      <input id=\"matchDuration\" type=\"number\" value={this.props.matchDuration/60/1000} onChange={this.setMatchDuration}></input>\n      <br/>\n      <label htmlFor=\"swapTime\">Tid mellom bytter</label>\n      <input id=\"swapTime\" type=\"number\" value={this.props.swapInterval/60/1000} onChange={this.setSwapInterval}></input>\n      <br/>\n      <button onClick={this.gotoMatch}>Match view</button>\n      <button onClick={this.gotoHelp}>Hjelp</button>\n      <hr/>\n      <button onClick={this.props.clearAppState}>Reset alt</button>\n    </div>\n  );\n  }\n}\nexport default SetupView;","import React from 'react';\nimport './App.css';\n\nclass HelpView extends React.Component {\n  \n  constructor(props){\n    super(props); \n    this.gotoSetup = this.gotoSetup.bind(this);\n    this.gotoMatch = this.gotoMatch.bind(this);\n  }\n\n  gotoSetup(){\n    this.props.setView('SetupView');\n  }\n  \n  gotoMatch(){\n    this.props.setView('MatchView');\n  }\n\n  render(){\n\n    \n  return (\n    <div className=\"App\">\n      Dette er en veldig enkel app for å holde orden på stillingen, hvilke spillere som skal bytte\n        og hvor lenge det er siden forrige bytte.<br/>\n        <ol>\n        <li>Skriv inn spillernavn og legg til alle spillerne som skal delta</li>\n        <li>Alle spillere havner i utgangspunktet på benken</li>\n        <li>Klikk på spillerene som skal starte, disse hopper da opp i listen over spillere på banen</li>\n        <li>Når kampen starter klikker du på \"start timer\" knappen</li>\n        <li>Øverste navn på listene er de som har vært lengst på banen eller på benken. De er neste som skal byttes</li>\n        <li>Hver gang du gjør et bytte så resettes timer for å vise hvor lang tid det er siden forrige bytte</li>\n        <li>Trykk på pause timer når omgangen er over</li>\n        </ol>\n        <button onClick={this.gotoMatch}>Match view</button>\n        <button onClick={this.gotoSetup}>Setup view</button>\n    </div>\n  );\n  }\n}\nexport default HelpView;","import React from 'react';\nimport MatchView from './MatchView.js';\nimport SetupView from './SetupView.js';\nimport HelpView from './HelpView.js';\nimport './App.css';\n\nclass App extends React.Component {\n  \n  constructor(props){\n    super(props)\n    this.state = this.getInitStateObject();\n\n    this.toggleTimer = this.toggleTimer.bind(this);\n    this.addPlayer = this.addPlayer.bind(this);\n    this.deletePlayer = this.deletePlayer.bind(this);\n    this.swapInPlayer = this.swapInPlayer.bind(this);\n    this.swapOutPlayer = this.swapOutPlayer.bind(this);\n    this.resetScore = this.resetScore.bind(this);\n    this.setView = this.setView.bind(this);\n    this.setMatchDuration = this.setMatchDuration.bind(this);\n    this.setSwapInterval = this.setSwapInterval.bind(this);\n    this.clearAppState = this.clearAppState.bind(this);\n\n  }\n\n  componentDidMount(){\n    let players = localStorage.getItem('MatchAssistantPlayers');\n    if(players){\n      let playerArray = JSON.parse(players);\n      this.setState({passivePlayers:playerArray,playerCount:playerArray.length});\n    }\n  }\n\n  toggleTimer(){\n    if(this.state.timerRunning){\n      this.setState({timerRunning: false});\n    }else{\n      this.setState({timerStart: new Date(), swapTime: new Date(), timerRunning: true});\n      window.navigator.vibrate([100,30,100,30,100]);\n    }\n  }\n\n  resetScore(){\n    this.setState({home:0,away:0});\n  }\n\n  addPlayer(e){\n    e.preventDefault();\n    let inputfield = document.getElementById(\"nameInput\");\n    let playerName = inputfield.value;\n    inputfield.value = \"\";\n    inputfield.focus();\n    let tmpPassivePlayers = this.state.passivePlayers;\n    let playerNumber = this.state.playerCount+1;\n    tmpPassivePlayers.push({no:playerNumber, name:playerName});\n    this.setState({\n      passivePlayers: tmpPassivePlayers, \n      playerCount: playerNumber });\n     \n    let playerList = tmpPassivePlayers.concat(this.state.activePlayers);\n    localStorage.setItem('MatchAssistantPlayers', JSON.stringify(playerList));  \n  }\n\n  deletePlayer(playerNo){\n    console.log(\"Player should have been deleted. But...  not implemented yet\");\n    //search active and passive players\n    //need to ensure no collision on player IDs\n  }\n\n  clearAppState(){\n    this.setState(this.getInitStateObject());\n  }\n\n  getInitStateObject(){\n    return {\n      home: 0,\n      away: 0,\n      timerStart: new Date(),\n      swapTime: new Date(),\n      timerRunning: false,\n      activePlayers: [],\n      passivePlayers: [],\n      playerCount:0,\n      activeView: 'SetupView',\n      swapInterval: 3*60*1000,\n      matchDuration : 13*60*1000\n    }\n  }\n\n  swapInPlayer(key){\n    let substitute;\n    const newPassivePlayers = this.state.passivePlayers.filter(\n        function(player){\n          if(player.no === key){\n            substitute = player;\n            return false\n          }\n          return true;    \n        }\n        );\n    const newActivePlayers = this.state.activePlayers.concat(substitute);    \n    this.setState({passivePlayers: newPassivePlayers, activePlayers: newActivePlayers, swapTime: new Date() });    \n  }\n\n  swapOutPlayer(key){\n    let substitute;\n    const newActivePlayers = this.state.activePlayers.filter(\n        function(player){\n          if(player.no === key){\n            substitute = player;\n            return false\n          }\n          return true;    \n        }\n        );\n    const newPassivePlayers = this.state.passivePlayers.concat(substitute);    \n    this.setState({passivePlayers: newPassivePlayers, activePlayers: newActivePlayers, swapTime: new Date() });    \n  }\n\n  setView(nextView){\n    this.setState({activeView: nextView});\n  }\n\n  setMatchDuration(nextMatchDuration){\n    this.setState({matchDuration: nextMatchDuration});\n  }\n\n  setSwapInterval(nextSwapInterval){\n    this.setState({swapInterval: nextSwapInterval});\n  }\n\n  render(){\n\n    let view;\n    if(this.state.activeView==='MatchView'){\n      view = <MatchView \n        passivePlayers={this.state.passivePlayers}\n        activePlayers={this.state.activePlayers}\n        swapInterval={this.state.swapInterval}\n        swapInPlayer={this.swapInPlayer}\n        swapOutPlayer={this.swapOutPlayer}\n        timerRunning={this.state.timerRunning} \n        timerStart={this.state.timerStart}\n        matchDuration={this.state.matchDuration}\n        swapTime={this.state.swapTime}\n        toggleTimer={this.toggleTimer}\n        setView={this.setView}\n      />\n    }else if(this.state.activeView==='SetupView'){\n      view = <SetupView \n        passivePlayers={this.state.passivePlayers}\n        activePlayers={this.state.activePlayers}\n        swapInterval={this.state.swapInterval}\n        matchDuration={this.state.matchDuration}\n        addPlayer={this.addPlayer}\n        deletePlayer={this.deletePlayer}\n        setSwapInterval={this.setSwapInterval}\n        setMatchDuration={this.setMatchDuration} \n        clearAppState={this.clearAppState}\n        setView={this.setView}/>     \n    }else{\n      view = <HelpView setView={this.setView}/>\n    }\n\n  return (\n    <div>{view}</div>\n  );\n  }\n}\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App.js';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}